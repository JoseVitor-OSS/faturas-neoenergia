import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import os
import time
import base64
import requests
import json
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime
from selenium.webdriver.chrome.options import Options
import zipfile
import io
import sys

# =============================================
# CONFIGURA√á√ÉO STREAMLIT PARA RAILWAY
# =============================================

# Configurar p√°gina ANTES de qualquer coisa
st.set_page_config(
    page_title="Sistema de Faturas Neoenergia",
    layout="wide",
    page_icon="üè≠"
)

# =============================================
# VERIFICA√á√ÉO DE AMBIENTE RAILWAY
# =============================================

def verificar_ambiente():
    """Verifica se estamos no Railway e configura corretamente"""
    st.sidebar.write("üîç **Informa√ß√µes do Ambiente:**")
    st.sidebar.write(f"- PORT: {os.environ.get('PORT', 'N√£o definida')}")
    st.sidebar.write(f"- RAILWAY_ENVIRONMENT: {'‚úÖ SIM' if 'RAILWAY_ENVIRONMENT' in os.environ else '‚ùå N√ÉO'}")
    
    # Configurar porta para Railway
    if 'RAILWAY_ENVIRONMENT' in os.environ:
        st.sidebar.success("üöÑ Executando no Railway")
        return True
    else:
        st.sidebar.info("üíª Executando localmente")
        return False

# =============================================
# CONFIGURA√á√ÉO DE ESTILOS
# =============================================

st.markdown("""
<style>
    .main, .stApp {
        background-color: #02231C;
        color: white;
    }
    .stButton>button {
        background-color: #00FF88;
        color: #02231C;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# =============================================
# FUN√á√ïES PRINCIPAIS (SIMPLIFICADAS)
# =============================================

def autorizar_google():
    """Autentica√ß√£o com Google Sheets"""
    try:
        # Verificar vari√°veis de ambiente
        required_vars = ['GCP_PROJECT_ID', 'GCP_PRIVATE_KEY', 'GCP_CLIENT_EMAIL']
        missing_vars = [var for var in required_vars if var not in os.environ]
        
        if missing_vars:
            st.error(f"‚ùå Vari√°veis faltando: {missing_vars}")
            return None
        
        from google.oauth2.service_account import Credentials
        
        service_account_info = {
            "type": "service_account",
            "project_id": os.environ['GCP_PROJECT_ID'],
            "private_key": os.environ['GCP_PRIVATE_KEY'].replace('\\n', '\n'),
            "client_email": os.environ['GCP_CLIENT_EMAIL'],
            "token_uri": "https://oauth2.googleapis.com/token",
        }
        
        creds = Credentials.from_service_account_info(
            service_account_info,
            scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
        gc = gspread.authorize(creds)
        st.success("‚úÖ Conectado ao Google Sheets!")
        return gc
        
    except Exception as e:
        st.error(f"‚ùå Erro na autentica√ß√£o: {e}")
        return None

def iniciar_navegador(headless=True):
    """Inicia navegador Chrome para Selenium"""
    try:
        chrome_options = Options()
        
        # Configura√ß√µes ESSENCIAIS para Railway
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        
        if headless:
            chrome_options.add_argument("--headless=new")
        
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # No Railway, o Chrome j√° est√° configurado automaticamente
        driver = webdriver.Chrome(options=chrome_options)
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        return driver
        
    except Exception as e:
        st.error(f"‚ùå Erro ao iniciar navegador: {e}")
        return None

def executar_demo():
    """Fun√ß√£o de demonstra√ß√£o para teste"""
    st.info("üöÄ Iniciando demonstra√ß√£o...")
    
    # Simular processamento
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    for i in range(5):
        progress_bar.progress((i + 1) / 5)
        status_text.text(f"Processando etapa {i + 1} de 5")
        time.sleep(1)
    
    status_text.text("‚úÖ Demonstra√ß√£o conclu√≠da!")
    st.success("üéâ Sistema funcionando corretamente no Railway!")
    
    # Testar navegador
    with st.spinner("üß™ Testando Selenium..."):
        navegador = iniciar_navegador(headless=True)
        if navegador:
            st.success("‚úÖ Selenium configurado com sucesso!")
            navegador.quit()
        else:
            st.warning("‚ö†Ô∏è Selenium n√£o p√¥de ser iniciado (pode ser normal no Railway)")

# =============================================
# INTERFACE PRINCIPAL
# =============================================

def main():
    st.title("üè≠ Sistema de Faturas Neoenergia")
    st.markdown("---")
    
    # Verificar ambiente
    is_railway = verificar_ambiente()
    
    # Sidebar
    st.sidebar.title("‚öôÔ∏è Configura√ß√µes")
    
    # Se√ß√£o de teste
    st.sidebar.header("üß™ Teste do Sistema")
    if st.sidebar.button("üöÄ Executar Teste", type="primary"):
        executar_demo()
    
    # Se√ß√£o principal
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Conectar Google Sheets")
        if st.button("üîó Conectar", key="connect_gsheets"):
            with st.spinner("Conectando..."):
                gc = autorizar_google()
                if gc:
                    try:
                        # Tentar carregar dados de exemplo
                        sheet_key = "1gI3h3F1ALScglYfr7NIfAxYyV0NSVjEJvoKFarlywBY"
                        spreadsheet = gc.open_by_key(sheet_key)
                        sheet = spreadsheet.worksheet("bd_ucs")
                        dados = sheet.get_all_values()
                        
                        if len(dados) > 1:
                            df = pd.DataFrame(dados[1:], columns=dados[0])
                            st.success(f"‚úÖ Dados carregados: {len(df)} registros")
                            st.dataframe(df.head(3))
                        else:
                            st.warning("‚ö†Ô∏è Planilha vazia ou n√£o encontrada")
                            
                    except Exception as e:
                        st.error(f"‚ùå Erro ao carregar dados: {e}")
    
    with col2:
        st.subheader("üîß Ferramentas")
        
        if st.button("üõ†Ô∏è Verificar Depend√™ncias", key="check_deps"):
            st.write("### üì¶ Depend√™ncias Instaladas:")
            deps = [
                ("Streamlit", "‚úÖ" if 'streamlit' in sys.modules else "‚ùå"),
                ("Pandas", "‚úÖ" if 'pandas' in sys.modules else "‚ùå"),
                ("Selenium", "‚úÖ" if 'selenium' in sys.modules else "‚ùå"),
                ("gspread", "‚úÖ" if 'gspread' in sys.modules else "‚ùå"),
            ]
            
            for dep, status in deps:
                st.write(f"- {dep}: {status}")
        
        if st.button("üåê Testar Conex√£o", key="test_conn"):
            try:
                response = requests.get("https://google.com", timeout=10)
                st.success("‚úÖ Conex√£o com internet: OK")
            except:
                st.error("‚ùå Sem conex√£o com internet")
    
    # Informa√ß√µes do sistema
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Informa√ß√µes do Sistema")
    
    info_col1, info_col2, info_col3 = st.columns(3)
    
    with info_col1:
        st.metric("Python", sys.version.split()[0])
    
    with info_col2:
        st.metric("Streamlit", st.__version__)
    
    with info_col3:
        st.metric("Ambiente", "Railway" if is_railway else "Local")
    
    # Mensagem de status
    if is_railway:
        st.success("üéâ Aplica√ß√£o rodando com sucesso no Railway!")
    else:
        st.info("üíª Executando em ambiente local")

# =============================================
# INICIALIZA√á√ÉO SEGURA
# =============================================

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error(f"‚ùå Erro cr√≠tico: {e}")
        st.info("üí° Verifique os logs no Railway para mais detalhes")
